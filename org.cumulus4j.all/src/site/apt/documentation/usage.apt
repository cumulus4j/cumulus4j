	---
	Usage
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2011-04-07

Usage

* Persistence Mapping

	You define the persistence mapping for your model classes in the normal way for JDO/JPA, using annotations or XML.
	For details about this, please consult DataNucleus' documentation
	about {{{http://www.datanucleus.org/products/accessplatform_3_0/jdo/mapping.html}JDO Mapping}}
	or {{{http://www.datanucleus.org/products/accessplatform_3_0/jpa/mapping.html}JPA Mapping}}.
	All standard annotations/XML applies here, with no exceptions.

	One difference between normal JDO/JPA persistence and Cumulus4j persistence is that if you want to query
	a field of one of your model classes in the datastore then it needs "indexing". This is not indexing in the 
	relational database	sense, but instead indexing of the encrypted field value so that it doesn't need loading into 
	memory to determine if it passes a particular query constraint. By default all persistent fields are "indexed". 
	Obviously this has an impact on performance, so you can specify particular fields to be not indexed. 
	You do this as follows:

	[[1]] JDO: Standard Annotations
	
	@Extension(vendorName="datanucleus", key="cumulus4j-queryable", value="false")
	
	[[2]] JDO/JPA: Cumulus4j Annotations
	
	@NotQueryable
	
	[[3]] JPA: DataNucleus Annotations
	
	@Extension(key="cumulus4j-queryable", value="false") 

* Persistence API

	Anyone familiar with either of the two standardised Java persistence APIs (JDO, JPA) should have no problem
	utilising Cumulus4j to encrypt their data. Above you defined the mapping of your classes, and now you choose the 
	API you prefer to handle the persistence process.

	{{{./persistence-api.html}Read more about the Persistence API.}}

* Datastore Schema

	Cumulus4j has its own datastore schema in order to provide secure data. You can find documentation of
	the current schema definition {{{./schema.html}here}}.

* Key store

	Cumulus4j stores all keys used to encrypt your database in a well-protected {{{key-store.html}key store}}.

* Deployment

    Cumulus4j has been tested for deployment onto the following datastores : RDBMS, HBase, MongoDB, ODF, Excel.
    This can be achieved using the relevant store plugin for DataNucleus.

    You find a documentation of the currently supported {{{./deployment-scenarios.html}deployment scenarios here}}.
    For details about which modules need to be deployed where, please consult the
    {{{./deployment-module-location-matrix.html}module-location-matrix}}.
