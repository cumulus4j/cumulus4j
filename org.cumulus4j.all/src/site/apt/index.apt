	---
	Home
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2011-06-29

Welcome to Cumulus4j!

* The problem

	Sensitive banking information was stolen and sold to tax authorities already quite a few times; and incidents of
	hackers copying huge databases from multinational companies are reported in the media again and again.
	It is understandable that customers are worried about the security of their data and most companies thus
	refrain from transmitting business-relevant data over the Internet to a service provider for outsourcing
	operational services (like invoicing or accounting).
	
	One of the most important barriers for the success of business-operational services via the Internet - software
	as a service - is thus guaranteeing data security to customers, so that not even a system administrator can dump
	and sell data.

* The solution

	To overcome this barrier, Cumulus4j aims at creating a secure architecture for trustworthy accounting software
	in the Internet. The demands on the trustworthy database made by an accounting software are naturally very similar
	to those of other enterprise applications. Therefore, Cumulus4j is an interesting solution to a multitude of
	applications.
	
	In order to provide a trustworthy data management, all data must be stored in an encrypted form in the cloud.
	Though this could already be achieved by a disk encryption software (e.g.
	{{{http://en.wikipedia.org/wiki/Linux_Unified_Key_Setup}LUKS}}
	or {{{http://en.wikipedia.org/wiki/TrueCrypt}TrueCrypt}}), this solution would require
	the hard disk to be {{{http://en.wikipedia.org/wiki/Mount_%28computing%29}mounted}} into the operating system
	before an application could operate on the data. And as soon as the disk is mounted, an internal adversary (e.g. a system
	administrator) could easily grab all data via the file system.

[./images/overview.png] Overview

	Cumulus4j solves this problem and fulfills the following requirements:

	* <<Security>>: State-of-the-art encryption algorithms protect your data. All data are decrypted in the volatile memory only.
	There is - unlike when using disk encryption - not only one single key for all data, but multiple ten-thousands of keys.
	Additionally, the en-/decryption is done inside the application and not as a drive on the operatin-system-level. This makes
	it nearly impossible for an internal adversary to steal more than a small number of data records (by RAM-dumping).

	* <<Easy integration>>: In order to ease the integration of Cumulus4j into an application, it was designed as a plug-in
	to {{{http://en.wikipedia.org/wiki/DataNucleus}DataNucleus}}. This way, modern persistence APIs like
	{{{http://en.wikipedia.org/wiki/Java_Data_Objects}Java Data Objects (JDO)}} or
	{{{http://en.wikipedia.org/wiki/Java_Persistence_API}Java Persistence API (JPA)}} are available, which facilitates the
	almost transparent integration of Cumulus4j into a cloud application (only very few lines of Cumulus4j-specific code are
	necessary for the key management).

	* <<Queryability>>: Though all records are stored in an encrypted form, they can be queried efficiently via the query languages
	JDOQL and JPQL.

	* <<Portablility>>: Cumulus4j can be used with many common databases as backend (e.g. MySQL, Google BigTable,
	Hadoop HBase, MongoDB, {{{http://www.datanucleus.org/products/accessplatform_3_0/datastores.html}etc.}}). It is written
	in Java and runs both in OSGi and in classic environments (JavaSE, JavaEE).

	[]

	The Cumulus4j project is sponsored by the German {{{http://www.bmbf.de/en/}Federal Ministry of Education and Research (BMBF)}}
	within the scope of the initiative {{{http://www.hightech-strategie.de/de/kmu-innovativ.php}KMU-innovativ}}.
	
	Cumulus4j will be released as free software under the conditions of the {{{./license.html}AGPL}} in January 2012.
