	---
	Unterstützte Algorithmen
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2011-06-14

Unterstützte Algorithmen

	Cumulus4j verwendet standardmäßig sehr schnelle und hochsichere Algorithmen. Daher empfehlen wir Ihnen,
	einfach die Standardeinstellungen zu verwenden. Doch abhängig von Ihrer Hardware oder Ihren persönlichen
	Vorlieben bervorzugen Sie vielleicht eine andere Konfiguration.

	Zum Beispiel verwendet Cumulus4j standardmäßig <<<TWOFISH>>> mit einer Schlüssellänge von 256 Bit. Diese
	Schlüssellänge grenzt an Paranoia und vielleicht möchten Sie ja auf nur 128 Bit wechseln, um etwas mehr Leistung
	zu gewinnen. 

	Mit 256-Bit-Schlüsseln ist <<<TWOFISH>>> sicherer als <<<AES>>>. Außerdem ist Twofish auf der meisten Hardware
	schneller. Mit bestimmten CPUs jedoch oder mit nur 128 Bit Schlüssellänge ist AES etwas schneller als Twofish.
	Und bei nur 128 Bit Schlüssellänge sind beide Algorithmen auch etwa gleich sicher.

	Im Folgenden finden Sie eine Liste aller unterstützten Möglichkeiten. Aber:

	<<Wichtig: Änderungen an den Einstellungen der Verschlüsselung können dazu führen, daß Cumulus4j nicht mehr
	funktioniert oder - noch viel schlimmer - daß es nicht mehr sicher ist!!! Ändern Sie daher nur dann die Einstellungen,
	wenn Sie wirklich verstehen, was Sie da tun!>>
	
	Wenn Sie unsicher sind, bleiben Sie besser bei den "{{{Empfohlene Möglichkeiten}empfohlenen Möglichkeiten}}"!

* Symmetrische Verschlüsselung

	{{{http://en.wikipedia.org/wiki/Symmetric_encryption}Symmetrische Verschlüsselung}} wird verwendet, um die Daten
	in Ihrer Datenbank sicher abzulegen. Da hierfür geheime Schlüssel notwendig sind, bietet Cumulus4j einen Schlüsselspeicher
	(auch "Key-Store" genannt), der seinerseits wiederum mittels symmetrischer Verschlüsselung die geheimen Schlüssel
	geschützt abspeichert (für den Fall, daß Sie Ihren Key-Store verlieren - z.B. auf einem USB-Speicher-Stick - oder
	daß jemand ihn stiehlt).

** {Empfohlene Möglichkeiten}

	Obgleich Sie aus zahlreichen Algorithmen für Verschlüsselung, Block-Modus, Füllung (auch "Padding" genannt)
	und Nachrichtenauthentifizierungs-Code (auch "MAC" genannt)
	wählen können, funktionieren nicht alle Kombinationen mit Cumulus4j. Einige funktionieren vielleicht, ergeben jedoch keinen
	Sinn; z.B. einen authentifizierenden Block-Modus mit einer MAC gemeinsam zu verwenden, bedeutet
	2 (redundante!) Nachrichtenauthenfikationen zu benutzen, was das System nur unnötig ausbremst, ohne zusätzliche Sicherheit
	zu bringen.

	Daher bieten wir Ihnen hier eine kleine Auswahl von sinnvollen Möglichkeiten, die Sie vielleicht gegenüber den
	Standardeinstellungen bevorzugen:

*-------------------------------+-----------------+-------------+------------+
| <<Verschlüsselungsverfahren>> | <<Block-Modus>> | <<Füllung>> | <<MAC>>    |
*-------------------------------+-----------------+-------------+------------+
| AES                           | GCM             | NoPadding   | None       |
*-------------------------------+-----------------+-------------+------------+
| AES                           | CFB             | NoPadding   | HMAC-SHA1  |
*-------------------------------+-----------------+-------------+------------+
| AES                           | CBC             | PKCS5       | HMAC-SHA1  |
*-------------------------------+-----------------+-------------+------------+
| Twofish                       | GCM             | NoPadding   | None       |
*-------------------------------+-----------------+-------------+------------+
| Twofish                       | CFB             | NoPadding   | HMAC-SHA1  |
*-------------------------------+-----------------+-------------+------------+
| Twofish                       | CBC             | PKCS5       | HMAC-SHA1  |
*-------------------------------+-----------------+-------------+------------+

	"Verschlüsselungsverfahren", "Block-Modus" and "Füllung" werden üblicherweise zusammen in eine Zeichenkette
	wie "AES/GCM/NoPadding" geschrieben (also mittels "/" separiert). Der Nachrichtenauthentifizierungs-Code (MAC)
	wird meist separat konfiguriert.

	Auf der Seite {{{./persistence-api.html}Persistenz-API}} ist dokumentiert, wie Sie dies für den eigentlichen
	Datenspeicher konfigurieren und auf {{{./key-store.html}Schlüsselspeicher}} sehen Sie, wie Sie die verschiedenen
	Verschlüsselungs-/MAC-Einstellungen auf den Key-Store anwenden.

** Blockchiffre-Verfahren

	{{{http://en.wikipedia.org/wiki/Block_cipher}Blockchiffren}} sind die meist-verwendeten Verschlüsselungsalgorithmen.
	Sie kombinieren sehr hohe Sicherheit mit guter Leistung.

	* <<<NULL>>>
	
		* Means NO encryption at all. You should never use this except for testing/debugging!

	* <<<AES>>>
	
		* {{{http://en.wikipedia.org/wiki/Advanced_Encryption_Standard}Wikipedia: Advanced Encryption Standard}}
	
	* <<<AES.FAST>>>
	 
		* This is the same algorithm as <<<AES>>>, but an implementation with higher memory consumption and being faster.
	
	* <<<AES.LIGHT>>> 
	
		* This is the same algorithm as <<<AES>>>, but an implementation with lower memory consumption and being slower.

	* <<<BLOWFISH>>>
	
		* {{{http://en.wikipedia.org/wiki/Blowfish_%28cipher%29}Wikipedia: Blowfish (cipher)}}

	* <<<CAMELLIA>>>
	
		* {{{http://en.wikipedia.org/wiki/Camellia_%28cipher%29}Wikipedia: Camellia (cipher)}}
	
	* <<<CAMELLIA.LIGHT>>>
	
		* This is the same algorithm as <<<CAMELLIA>>>, but an implementation with lower memory consumption and being slower.
	
	* <<<CAST5>>>

		* {{{http://en.wikipedia.org/wiki/CAST-128}Wikipedia: CAST-128}}
	
	* <<<CAST6>>>

		* {{{http://en.wikipedia.org/wiki/CAST-256}Wikipedia: CAST-256}}
	
	* <<<DES>>>
	
		* {{{http://en.wikipedia.org/wiki/Data_Encryption_Standard}Wikipedia: Data Encryption Standard}}
	
	* <<<DESEDE>>>
	
	* <<<GOST28147>>>
	
	* <<<NOEKEON>>>
	
		* {{{http://en.wikipedia.org/wiki/NOEKEON}Wikipedia: NOEKEON}}
		
	* <<<RC2>>>
	
		* {{{http://en.wikipedia.org/wiki/RC2}Wikipedia: RC2}}
	
	* <<<RC5-32>>>
	
		* {{{http://en.wikipedia.org/wiki/RC5}Wikipedia: RC5}}
	
	* <<<RC5-64>>>
	
	* <<<RC6>>>
	
		* {{{http://en.wikipedia.org/wiki/RC6}Wikipedia: RC6}}
	
	* <<<RIJNDAEL>>>
	
	* <<<SEED>>>
	
		* {{{http://en.wikipedia.org/wiki/SEED}Wikipedia: SEED}}
	
	* <<<SERPENT>>>
	
		* {{{http://en.wikipedia.org/wiki/Serpent_%28cipher%29}Wikipedia: Serpent (cipher)}}
	
	* <<<SKIPJACK>>>
	
		* {{{http://en.wikipedia.org/wiki/Skipjack_%28cipher%29}Wikipedia: Skipjack (cipher)}}
	
	* <<<TEA>>>
	
		* {{{http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm}Wikipedia: Tiny Encryption Algorithm}}
	
	* <<<TWOFISH>>>
	
		* {{{http://en.wikipedia.org/wiki/Twofish}Wikipedia: Twofish}}
	
	* <<<XTEA>>>
	
		* {{{http://en.wikipedia.org/wiki/XTEA}Wikipedia: XTEA}}
	
	[]

** Stromchiffre-Verfahren

	{{{http://en.wikipedia.org/wiki/Stream_cipher}Stromchiffren}} können anstelle von Blockchiffren verwendet werden. Sie sind
	üblicherweise schneller, jedoch auch anfälliger für ernste Sicherheitsprobleme, wenn sie inkorrekt verwendet werden.
	Allerdings glauben wir, daß Cumulus4j sie korrekt verwendet - z.B. indem lange IVs zur Anwendung kommen - und Sie können
	sie daher gern ausprobieren, wenn hohe Leistungen essentiell für Sie sind (wenn Sie Leistungsmessungen vornehmen, senden
	Sie sie uns bitte!).
	
	Der Hauptgrund, weshalb wir sie (noch) nicht empfehlen, ist, daß wir die Vielzahl an unterstützten Algorithmen nicht
	intensiv testen und untersuchen können. Wenn Sie uns dabei behilflich sein möchten, dann bitte probieren Sie sie!
	Hier sind die derzeit unterstützten Stromchiffren:

	* <<<GRAIN-128>>>
	
		* {{{http://en.wikipedia.org/wiki/Grain_%28cipher%29}Wikipedia: Grain (cipher)}}
	
	* <<<GRAIN-V1>>>
	
		* {{{http://en.wikipedia.org/wiki/Grain_%28cipher%29}Wikipedia: Grain (cipher)}}

	* <<<HC-128>>>
	
		* {{{http://en.wikipedia.org/wiki/HC-128}Wikipedia: HC-128}}
	
	* <<<HC-256>>>

		* {{{http://en.wikipedia.org/wiki/HC-256}Wikipedia: HC-256}}	

	* <<<ISAAC>>>
	
		* {{{http://en.wikipedia.org/wiki/ISAAC_%28cipher%29}Wikipedia: ISAAC (cipher)}}
	
	* <<<RC4>>>
	
		* {{{http://en.wikipedia.org/wiki/RC4}Wikipedia: RC4}}
	
	* <<<SALSA20>>>
	
		* {{{http://en.wikipedia.org/wiki/Salsa20}Wikipedia: Salsa20}}
	
	[]

* Asymmetrische Verschlüsselung

	{{{http://en.wikipedia.org/wiki/Asymmetric_encryption}Asymmetrische Verschlüsselung}} wird verwendet,
	um den Austausch der geheimen Schlüssel (die von der symmetrischen Verschlüsselung benutzt werden) zu
	schützen.

	Der {{{./key-store.html}Schlüsselspeicher}} liegt auf dem Client oder auf einem separaten Schlüssel-Server
	(siehe {{{./deployment-scenarios.html}Deployment-Szenarios}}), aber die geheimen Schlüssel werden auf dem
	Applikations-Server benötigt, um dort die eigentlichen Daten zu ent- bzw. zu verschlüsseln. Das bedeutet,
	Schlüssel-Transfers sind notwendig. 

	Die Schlüssel werden auf ihrem Weg vom Key-Store durch das offene Internet zum Applikations-Server
	üblicherweise durch eine HTTPS-Verbindung geschützt.

	In order to get the keys from the key store to the application server, usually an
	HTTPS connection protects them on their way through the open internet. However,
	in order to get the keys from one application server node to another node (in the typical
	cluster/cloud environment), the keys might be temporarily stored in a database. To protect
	the keys in these situations, asymmetric encryption is used.

	Every application server node generates a public/private-key-pair. Whenever it requires
	a key, it sends its public key together with the key-request to the key-manager. The
	key is then encrypted with the public key and sent back. Only the original app-server-node
	can decrypt the key. An administrator who dumps the medium used for node-to-node-communication
	cannot make use of what he'll find there.

	<<<RSA//OAEPWITHSHA1ANDMGF1PADDING>>> is used by default. At the moment, there is no configuration
	setting to change this, yet. However, this will likely change soon.

** Asymmetrische Verfahren

	The following engines are available:

	* <<<ELGAMAL>>>
	
		* {{{http://en.wikipedia.org/wiki/ElGamal_encryption}Wikipedia: ElGamal encryption}}

	* <<<NACCACHESTERN>>>
	
		* {{{http://en.wikipedia.org/wiki/Naccache%E2%80%93Stern_cryptosystem}Wikipedia: Naccache–Stern cryptosystem}}

	* <<<RSA>>>
	
		* {{{http://en.wikipedia.org/wiki/RSA}Wikipedia: RSA}}
	
	[]

* {Blockchiffre-Modi}

	Block ciphers work - as the name implies - on a block of data (usually 64 or 128 bit). But usually there
	is more data to encrypt than just one block. That's why the block cipher engine is always combined with a
	{{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation}mode of operation}}. The mode implements
	a secure way to encrypt (or decrypt) more than just one block.
	
	Cumulus4j supports the following modes:
	
	* <<<ECB>>>
	
		* Do NOT use this!!! It is extremely insecure!!!
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29}Wikipedia}}
	
	* <<<CBC>>>
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29}Wikipedia}}
	
	* <<<CBC-CTS>>>

		* {{{http://en.wikipedia.org/wiki/Ciphertext_stealing#CBC_ciphertext_stealing}Wikipedia: CBC ciphertext stealing}}

	* <<<CCM>>>
	
		* {{{http://en.wikipedia.org/wiki/CCM_mode}Wikipedia: CCM mode}}
	
	* <<<CFB>>>
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29}Wikipedia: Cipher feedback (CFB)}}
	
	* <<<CFB8>>>, <<<CFB16>>>, <<<CFB24>>> ... <<<CFB256>>>
	
	* <<<CTS>>> (do NOT use this - use <<<CBC-CTS>>> instead!)

	* <<<EAX>>>
	
		* {{{http://en.wikipedia.org/wiki/EAX_mode}Wikipedia: EAX mode}}
	
	* <<<GCM>>>
	
		* {{{http://en.wikipedia.org/wiki/Galois/Counter_Mode}Wikipedia: Galois/Counter Mode}}
	
	* <<<GOFB>>>
	
	* <<<OFB>>>
	
		* {{{http://en.wikipedia.org/wiki/Output_feedback}Wikipedia: Output feedback}}
	
	* <<<OFB8>>>, <<<OFB16>>>, <<<OFB24>>> ... <<<OFB256>>>
	
	* <<<SIC>>>
	
	[]

* Padding

** Symmetric

	When encrypting data using a symmetric block-cipher, the input data usually does not match exactly the fixed block size.
	Therefore, with most block-cipher-modes, it is required that the last input block is filled up with additional bytes until
	it matches the required length.

	* <<<NOPADDING>>>
	
		* Means to not use any padding. This only works with stream-ciphers or with block-cipher-modes that operate the
		block-cipher in a stream-cipher-like mode (like e.g. CFB does).

	* <<<ISO10126>>>
	
		* {{{http://en.wikipedia.org/wiki/Padding_%28cryptography%29#Byte_padding}Wikipedia: Padding (cryptography) / Byte padding}}

	* <<<ISO10126-2>>>

		* {{{http://en.wikipedia.org/wiki/Padding_%28cryptography%29#Byte_padding}Wikipedia: Padding (cryptography) / Byte padding}}

	* <<<ISO7816-4>>>

	* <<<PKCS5>>>
	
		* {{{http://en.wikipedia.org/wiki/PKCS}Wikipedia: PKCS}}

	* <<<PKCS7>>>

		* {{{http://en.wikipedia.org/wiki/Padding_%28cryptography%29#Byte_padding}Wikipedia: Padding (cryptography) / Byte padding}}

	* <<<TBC>>>

	* <<<X9.23>>>
	
		* {{{http://en.wikipedia.org/wiki/Padding_%28cryptography%29#Byte_padding}Wikipedia: Padding (cryptography) / Byte padding}}	

	* <<<ZEROBYTE>>>

		* {{{http://en.wikipedia.org/wiki/Padding_%28cryptography%29#Byte_padding}Wikipedia: Padding (cryptography) / Byte padding}}
	
	[]
	
** Asymmetric

	In public-key-cryptography, padding means to prepare a message for encryption using an elaborate algorithm. Originally,
	"padding" was nothing more than filling up the message with random bytes, but because this is not a secure form of padding,
	it is not used anymore. Modern padding algorithms are far more advanced in order to provide protection against
	many forms of attacks.

	* <<<NOPADDING>>>

		* Means to not use any padding. This only works, if the input data already matches the requirements of the
		public-key-encryption-algorithm.

	* <<<ISO9796-1>>>

	* <<<OAEP>>>

		* {{{http://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding}Wikipedia: Optimal asymmetric encryption padding}}

	* <<<OAEPWITHSHA1ANDMGF1>>>

		* {{{http://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding}Wikipedia: Optimal asymmetric encryption padding}}

		* {{{http://en.wikipedia.org/wiki/SHA-1}Wikipedia: SHA-1}}
		
		* {{{http://www.ietf.org/rfc/rfc2437.txt}RFC 2437: Chapter 10.2 (Mask Generation Functions) and 10.2.1 (MGF1)}}

	* <<<PKCS1>>>
	
		* {{{http://en.wikipedia.org/wiki/PKCS1}Wikipedia: PKCS1}}

	[]

* MAC

	A {{{http://en.wikipedia.org/wiki/Message_authentication_code}Message authentication code}} (or MAC) is used to
	detect data manipulation or corruption. It is thus similar to a checksum, but in contrast to it, an attacker cannot
	simply modify a few more bits to produce the same checksum as the original message.

	* <<<NONE>>>
	
		* Means to NOT use a MAC at all. This is only recommended, if your {{{Blockchiffre-Modi}Blockchiffre-Modus}}
		already contains authentication (like e.g. <<<GCM>>> does). Otherwise, it is highly recommended to use a
		MAC.
	
	* <<<DES>>>
	
		* {{{http://en.wikipedia.org/wiki/Data_Encryption_Standard}Wikipedia: Data Encryption Standard}}
	
	* <<<DES/CFB8>>>
	
	* <<<DES64>>>
	
	* <<<DESWITHISO9797>>>
	
	* <<<GOST28147>>>
	
		* {{{http://en.wikipedia.org/wiki/GOST_%28block_cipher%29}Wikipedia: GOST (block cipher)}}
	
	* <<<HMAC-MD2>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/MD2_%28cryptography%29}Wikipedia: MD2 (cryptography)}}
	
	* <<<HMAC-MD4>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}

		* {{{http://en.wikipedia.org/wiki/MD4}Wikipedia: MD4}}
	
	* <<<HMAC-MD5>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/MD5}Wikipedia: MD5}}
	
	* <<<HMAC-RIPEMD128>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}

		* {{{http://en.wikipedia.org/wiki/RIPEMD}Wikipedia: RIPEMD}}
	
	* <<<HMAC-RIPEMD160>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/RIPEMD}Wikipedia: RIPEMD}}
	
	* <<<HMAC-SHA1>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
				
		* {{{http://en.wikipedia.org/wiki/SHA-1}Wikipedia: SHA-1}}		
	
	* <<<HMAC-SHA224>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/SHA-2}Wikipedia: SHA-2}}
	
	* <<<HMAC-SHA256>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/SHA-2}Wikipedia: SHA-2}}
	
	* <<<HMAC-SHA384>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/SHA-2}Wikipedia: SHA-2}}
	
	* <<<HMAC-SHA512>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/SHA-2}Wikipedia: SHA-2}}
	
	* <<<HMAC-TIGER>>>
	
		* {{{http://en.wikipedia.org/wiki/HMAC}Wikipedia: HMAC}}
		
		* {{{http://en.wikipedia.org/wiki/Tiger_%28cryptography%29}Wikipedia: Tiger (cryptography)}}
	
	* <<<ISO9797ALG3>>>
	
	* <<<ISO9797ALG3WITHISO7816-4PADDING>>>
	
	* <<<OLDHMACSHA384>>>
	
	* <<<OLDHMACSHA512>>>
	
	* <<<RC2>>>
	
		* {{{http://en.wikipedia.org/wiki/RC2}Wikipedia: RC2}}
	
	* <<<RC2/CFB8>>>
	
	[]
