	---
	Unterstützte Algorithmen
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2011-06-14

Unterstützte Algorithmen

	Cumulus4j uses very fast and highly secure algorithms by default. Thus, it is recommended
	that you just use the default settings. However, depending on your hardware or your
	personal taste, you might prefer a different configuration.

	For example, the default is to use <<<TWOFISH>>> with 256 bit key size. 256 bit key size
	is close to paranoia and you might choose to use only 128 bit instead in order to gain performance.

	With 256 bit keys, <<<TWOFISH>>> is more secure than <<<AES>>>. Furthermore, on ordinary hardware,
	Twofish is faster. However, on some CPUs or with 128 bit key size, AES might be slightly faster
	while providing approximately the same level of security.

	In the following, you'll find a list of all supported possibilities. However:

	<<Important: Changing the encryption settings can cause Cumulus4j to not work at all
	or - even worse - it might break security!!! Only change the defaults, if you really know
	what you are doing!>>
	
	If you are unsure, stick with the "{{Recommended choices}}"!

* Symmetric encryption

	{{{http://en.wikipedia.org/wiki/Symmetric_encryption}Symmetric encryption}} is used to encrypt the data
	in your database. Since it requires secret keys, Cumulus4j provides a key store, which also uses symmetric
	encryption to protect your keys (in case you loose your key store - e.g. on a USB thumb drive - or someone
	steals it).

** {Recommended choices}

	While there are many algorithms for encryption, block-mode, padding and MAC available to choose from, not
	all combinations of them work with Cumulus4j. Some others work, but make no sense; e.g. to combine an
	authenticating block-mode with a MAC means to have 2 (redundant!) message authentications which only slows
	down the system unnecessarily.

	Therefore, we provide a small choice here that might be suitable for you and preferred over the default
	settings:

*-------------------+-----------------+----------------+------------+
| <<Encryption>>    | <<Mode>>        | <<Padding>>    | <<MAC>>    |
*-------------------+-----------------+----------------+------------+
| AES               | GCM             | NoPadding      | None       |
*-------------------+-----------------+----------------+------------+
| AES               | CFB             | NoPadding      | HMAC-SHA1  |
*-------------------+-----------------+----------------+------------+
| AES               | CBC             | PKCS5          | HMAC-SHA1  |
*-------------------+-----------------+----------------+------------+
| Twofish           | GCM             | NoPadding      | None       |
*-------------------+-----------------+----------------+------------+
| Twofish           | CFB             | NoPadding      | HMAC-SHA1  |
*-------------------+-----------------+----------------+------------+
| Twofish           | CBC             | PKCS5          | HMAC-SHA1  |
*-------------------+-----------------+----------------+------------+

	"Encryption", "Mode" and "Padding" are usually concatenated to a string like "AES/GCM/NoPadding".
	The MAC is usually configured separately.
	
	In {{{./persistence-api.html}Persistence API}}, it is documented, how you configure this for the
	actual datastore and in {{{./key-store.html}Key store}} you'll see how you can apply different
	encryption/MAC settings to the key store.

** Block cipher engines

	{{{http://en.wikipedia.org/wiki/Block_cipher}Block ciphers}} are the most widely used encryption algorithms.
	They combine very high security with good performance.

	* <<<NULL>>>
	
		* Means NO encryption at all. You should never use this except for testing/debugging!

	* <<<AES>>>
	
		* {{{http://en.wikipedia.org/wiki/Advanced_Encryption_Standard}Wikipedia: Advanced Encryption Standard}}
	
	* <<<AES.FAST>>>
	 
		* This is the same algorithm as <<<AES>>>, but an implementation with higher memory consumption and being faster.
	
	* <<<AES.LIGHT>>> 
	
		* This is the same algorithm as <<<AES>>>, but an implementation with lower memory consumption and being slower.

	* <<<BLOWFISH>>>
	
		* {{{http://en.wikipedia.org/wiki/Blowfish_%28cipher%29}Wikipedia: Blowfish (cipher)}}

	* <<<CAMELLIA>>>
	
		* {{{http://en.wikipedia.org/wiki/Camellia_%28cipher%29}Wikipedia: Camellia (cipher)}}
	
	* <<<CAMELLIA.LIGHT>>>
	
		* This is the same algorithm as <<<CAMELLIA>>>, but an implementation with lower memory consumption and being slower.
	
	* <<<CAST5>>>

		* {{{http://en.wikipedia.org/wiki/CAST-128}Wikipedia: CAST-128}}
	
	* <<<CAST6>>>

		* {{{http://en.wikipedia.org/wiki/CAST-256}Wikipedia: CAST-256}}
	
	* <<<DES>>>
	
		* {{{http://en.wikipedia.org/wiki/Data_Encryption_Standard}Wikipedia: Data Encryption Standard}}
	
	* <<<DESEDE>>>
	
	* <<<GOST28147>>>
	
	* <<<NOEKEON>>>
	
		* {{{http://en.wikipedia.org/wiki/NOEKEON}Wikipedia: NOEKEON}}
		
	* <<<RC2>>>
	
		* {{{http://en.wikipedia.org/wiki/RC2}Wikipedia: RC2}}
	
	* <<<RC5-32>>>
	
		* {{{http://en.wikipedia.org/wiki/RC5}Wikipedia: RC5}}
	
	* <<<RC5-64>>>
	
	* <<<RC6>>>
	
		* {{{http://en.wikipedia.org/wiki/RC6}Wikipedia: RC6}}
	
	* <<<RIJNDAEL>>>
	
	* <<<SEED>>>
	
		* {{{http://en.wikipedia.org/wiki/SEED}Wikipedia: SEED}}
	
	* <<<SERPENT>>>
	
		* {{{http://en.wikipedia.org/wiki/Serpent_%28cipher%29}Wikipedia: Serpent (cipher)}}
	
	* <<<SKIPJACK>>>
	
		* {{{http://en.wikipedia.org/wiki/Skipjack_%28cipher%29}Wikipedia: Skipjack (cipher)}}
	
	* <<<TEA>>>
	
		* {{{http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm}Wikipedia: Tiny Encryption Algorithm}}
	
	* <<<TWOFISH>>>
	
		* {{{http://en.wikipedia.org/wiki/Twofish}Wikipedia: Twofish}}
	
	* <<<XTEA>>>
	
		* {{{http://en.wikipedia.org/wiki/XTEA}Wikipedia: XTEA}}
	
	[]

** Stream cipher engines

	{{{http://en.wikipedia.org/wiki/Stream_cipher}Stream ciphers}} can be used instead of block ciphers. They are
	usually faster, but more susceptible to serious security problems if used incorrectly. However, we believe
	that Cumulus4j uses them correctly - e.g. by using long IVs - and you might give them a try, if high performance
	is essential to you (if you do benchmarks, please send them to us!).
	
	The main reason why we do not recommend them (yet), is that we cannot thoroughly test and investigate the
	multitude of supported algorithms. If you're willing to help us, please do! Here's what is supported at the moment:

	* <<<GRAIN-128>>>
	
	* <<<GRAIN-V1>>>
	
	* <<<HC-128>>>
	
	* <<<HC-256>>>
	
	* <<<ISAAC>>>
	
	* <<<RC4>>>
	
	* <<<SALSA20>>>
	
	[]

* Asymmetric encryption

	{{{http://en.wikipedia.org/wiki/Asymmetric_encryption}Asymmetric encryption}} is used
	to protect the key exchange (of the keys that are used in the symmetric encryption).

	The {{{./key-store.html}key store}} is located on the client or on a separate key server
	(see {{{./deployment-scenarios.html}Deployment scenarios}}, but the keys are needed
	on the application server in order to encrypt/decrypt the actual data. That
	means key transfers are necessary.
	
	In order to get the keys from the key store to the application server, usually an
	HTTPS connection protects them on their way through the open internet. However,
	in order to get the keys from one application server node to another node (in the typical
	cluster/cloud environment), the keys might be temporarily stored in a database. To protect
	the keys in these situations, asymmetric encryption is used.

	Every application server node generates a public/private-key-pair. Whenever it requires
	a key, it sends its public key together with the key-request to the key-manager. The
	key is then encrypted with the public key and sent back. Only the original app-server-node
	can decrypt the key. An administrator who dumps the medium used for node-to-node-communication
	cannot make use of what he'll find there.

	<<<RSA//OAEPWITHSHA1ANDMGF1PADDING>>> is used by default. At the moment, there is no configuration
	setting to change this, yet. However, this will likely change soon.

** Asymmetric engines

	The following engines are available:

	* <<<ELGAMAL>>>

	* <<<NACCACHESTERN>>>

	* <<<RSA>>>
	
	[]

* {Block cipher operation mode}s

	Block ciphers work - as the name implies - on a block of data (usually 64 or 128 bit). But usually there
	is more data to encrypt than just one block. That's why the block cipher engine is always combined with a
	{{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation}mode of operation}}. The mode implements
	a secure way to encrypt (or decrypt) more than just one block.
	
	Cumulus4j supports the following modes:
	
	* <<<ECB>>>
	
		* Do NOT use this!!! It is extremely insecure!!!
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29}Wikipedia}}
	
	* <<<CBC>>>
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29}Wikipedia}}
	
	* <<<CBC-CTS>>>

		* {{{http://en.wikipedia.org/wiki/Ciphertext_stealing#CBC_ciphertext_stealing}Wikipedia: CBC ciphertext stealing}}

	* <<<CCM>>>
	
		* {{{http://en.wikipedia.org/wiki/CCM_mode}Wikipedia: CCM mode}}
	
	* <<<CFB>>>
	
		* {{{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29}Wikipedia}}
	
	* <<<CFB8>>>, <<<CFB16>>>, <<<CFB24>>> ... <<<CFB256>>>
	
	* <<<CTS>>> (do NOT use this - use <<<CBC-CTS>>> instead!)

	* <<<EAX>>>
	
		* {{{http://en.wikipedia.org/wiki/EAX_mode}Wikipedia: EAX mode}}
	
	* <<<GCM>>>
	
		* {{{http://en.wikipedia.org/wiki/Galois/Counter_Mode}Wikipedia: Galois/Counter Mode}}
	
	* <<<GOFB>>>
	
	* <<<OFB>>>
	
		* {{{http://en.wikipedia.org/wiki/Output_feedback}Wikipedia: Output feedback}}
	
	* <<<OFB8>>>, <<<OFB16>>>, <<<OFB24>>> ... <<<OFB256>>>
	
	* <<<SIC>>>
	
	[]

* Padding

** Symmetric

	* <<<NOPADDING>>>

	* <<<ISO10126>>>

	* <<<ISO10126-2>>>

	* <<<ISO7816-4>>>

	* <<<PKCS5>>>

	* <<<PKCS7>>>

	* <<<TBC>>>

	* <<<X9.23>>>

	* <<<ZEROBYTE>>>
	
	[]
	
** Asymmetric

	* <<<NOPADDING>>>

	* <<<ISO9796-1>>>

	* <<<OAEP>>>

	* <<<OAEPWITHSHA1ANDMGF1>>>

	* <<<PKCS1>>>
	
	[]

* MAC

	A {{{http://en.wikipedia.org/wiki/Message_authentication_code}Message authentication code}} (or MAC) is used to
	detect data manipulation or corruption.

	* <<<NONE>>>
	
		* Means to NOT use a MAC at all. This is only recommended, if your {{Block cipher operation mode}}
		already contains authentication (like e.g. <<<GCM>>> does). Otherwise, it is highly recommended to use a
		MAC.
	
	* <<<DES>>>
	
	* <<<DES/CFB8>>>
	
	* <<<DES64>>>
	
	* <<<DESWITHISO9797>>>
	
	* <<<GOST28147>>>
	
	* <<<HMAC-MD2>>>
	
	* <<<HMAC-MD4>>>
	
	* <<<HMAC-MD5>>>
	
	* <<<HMAC-RIPEMD128>>>
	
	* <<<HMAC-RIPEMD160>>>
	
	* <<<HMAC-SHA1>>>
	
	* <<<HMAC-SHA224>>>
	
	* <<<HMAC-SHA256>>>
	
	* <<<HMAC-SHA384>>>
	
	* <<<HMAC-SHA512>>>
	
	* <<<HMAC-TIGER>>>
	
	* <<<ISO9797ALG3>>>
	
	* <<<ISO9797ALG3WITHISO7816-4PADDING>>>
	
	* <<<OLDHMACSHA384>>>
	
	* <<<OLDHMACSHA512>>>
	
	* <<<RC2>>>
	
	* <<<RC2/CFB8>>>
	
	[]
	
* TODO
	
	Continue to document this!

