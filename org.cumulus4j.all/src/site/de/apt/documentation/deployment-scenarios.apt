	---
	Betriebsszenarien
	---
	Marco หงุ่ยตระกูล-Schulze
	---
	2011-05-26

Betriebsszenarien

	Cumulus4j kann in zwei verschiedenen Szenarien betrieben werden. Aber bevor wir diese erklären, hier
	eine Darstellung des normalen Betriebs (ohne Cumulus4j), den Sie bereits kennen, zum Vergleich:

[../images/deployment-scenario/deployment-scenario-without-cumulus4j.png] Betrieb ohne Cumulus4j

	Normalerweise betreiben Sie das Back-End Ihrer Applikation auf Ihrem Applikationsserver (z.B.
	Jetty, Tomcat, Glassfish, JBoss, oder was immer Sie bevorzugen). Wenn Ihr Client ein Browser ist, dann
	ist das bereits alles. Wenn Ihr Client ein Rich-Client (auch Fat-Client genannt) ist, dann installieren
	Sie zusätzlich das Front-End auf Ihren Client-Computern. 

	Wie aus dem blaugrünen Pfeil hervorgeht, wird die Verbindung (üblicherweise ein TCP/IP-basierendes Protokoll
	wie HTTP, HTTPS, RMI etc.) vom Client aus aufgebaut. Anfragen werden darüber vom Client an den Server
	geschickt, während die Antworten auf dem entgegengesetzten Weg zurückkommen.

* {2-computer-scenario} (ohne Schlüssel-Server)

	If you add Cumulus4j to the picture, your back-end will additionally contain a Cumulus4j REST-based
	API and your client communicates in parallel with this API to allow for key management:

[../images/deployment-scenario/deployment-scenario-without-keyserver.png] Deployment without key server

	The second communication channel is (as indicated by the yellow arrow) initiated by the client,
	too, and should thus not lead to any firewall problem.

	The requests, however, are sent from the server to the client inside the existing connection. These
	key requests happen whenever the server has to encrypt or decrypt data and therefore needs access to
	certain keys.

	At the moment, this scenario only works with a rich client, because the Cumulus4j project does not (yet)
	provide JavaScript client-libs. They might follow later. If you want to contribute this functionality, please
	join the {{{./development.html}development}} team! You're welcome! 

* {3-computer-scenario} (mit Schlüssel-Server)

	Alternatively to holding the keys on every client, it is possible to run a separate key-server:

[../images/deployment-scenario/deployment-scenario-with-keyserver.png] Deployment with key server

	This key-server could be located in your company's private LAN, for example, or somewhere in the
	internet, but separated from the application servers (e.g. another cloud or a hosting provider).

* Modules

	Which modules need to be deployed where is documented in the
	{{{./deployment-module-location-matrix.html}module-location-matrix}}.

* {Cluster-nodes}

	It is important to understand that the application server usually is not one single machine, but a cluster.
	Especially when using the cloud, the application server might be distributed over an unknown number
	of physical machines (cluster-nodes).

	Therefore, it can happen (and is even very likely!) that the two connections arrive on separate cluster-nodes,
	like shown in this example:

[../images/deployment-scenario/deployment-scenario-without-keyserver-with-cluster.png] Deployment without key server with clustered application server

	Therefore, the original key request (1) must be sent to the cluster-node having a direct connection
	with the key-manager, first. Then, this other cluster-node forwards the key request (2) to the key-manager
	and after receiving the response (3) it finally forwards that response to the original requestor (4).

	The handling of this complete process is done by implementations of
	{{{../apidocs/index.html?org/cumulus4j/store/crypto/keymanager/messagebroker/MessageBroker.html}MessageBroker}}.
