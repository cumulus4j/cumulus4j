<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>org.cumulus4j.parent</artifactId>
		<groupId>org.cumulus4j</groupId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../org.cumulus4j.parent/pom.xml</relativePath>
	</parent>
	<!--
		Added the URL here again, even though the parent already declares it,
		because that property seems not to be inherited directly, but instead
		the artifactId "org.cumulus4j.all" is appended to the parent's URL,
		which is definitely wrong for this aggregator. Marco.
	-->
	<url>http://www.cumulus4j.org/</url>

	<!--
		Added the SCM URL here again, even though the parent already declares
		it, because that property seems not to be inherited directly, but
		instead the artifactId "org.cumulus4j.all" is appended to the parent's
		SCM URL, which is definitely wrong for this aggregator. Marco.
	-->
	<scm>
		<connection>scm:svn:https://dev.nightlabs.org/svn/private/fzi/src/trunk/</connection>
	</scm>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.cumulus4j</groupId>
	<artifactId>org.cumulus4j.all</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<!--
		I prefer the name "org.cumulus4j.all", but unfortunately I could not
		get the site to be generated with another name than the one declared
		here. Thus, I replaced this here by a more end-user-oriented name.
		Marco.
	-->
	<name>Cumulus4j</name>
	<!--
		This description is displayed on the web site's /index.html (the
		auto-report's "About") and therefore must be a bit more elaborate.
	-->
	<description>Cumulus4j is an encryption layer protecting your data from the hosting company.</description>

	<modules>
		<module>../org.cumulus4j.api</module>
		<module>../org.cumulus4j.core</module>
		<module>../org.cumulus4j.keyserver.back.plugin</module>
		<module>../org.cumulus4j.keyserver.back.webapp</module>
		<module>../org.cumulus4j.keyserver.front.client</module>
		<module>../org.cumulus4j.keyserver.front.webapp</module>
		<module>../org.cumulus4j.parent</module>
		<module>../org.cumulus4j.test</module>
	</modules>
	
	<distributionManagement>
		<!--
		We configure the site only here (and not in the parent), because it otherwise uploads all
		modules individually, which we don't want. We want it to upload only the one from
		org.cumulus4j.all.
		-->
		<site>
			<id>www.cumulus4j.org</id>
			<url>scp://cumulus4j@www.cumulus4j.org/srv/www/www.cumulus4j.org/htdocs/</url>
		</site>
	</distributionManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<configuration>
					<locales>en,de</locales>
					<inputencoding>UTF-8</inputencoding>
					<outputencoding>UTF-8</outputencoding>
					<reportPlugins>
						<plugin>
							<artifactId>maven-project-info-reports-plugin</artifactId>
							<configuration>
								<dependencyDetailsEnabled>true</dependencyDetailsEnabled>
								<dependencyLocationsEnabled>true</dependencyLocationsEnabled>
							</configuration>
						</plugin>
<!--
The Javadoc is deployed on the web-site, even if this is missing. The only difference is that
it generates links to the Javadoc in the report section (called "Project Documentation"). Since
we don't need the link twice and I prefer it in our manually managed "Documentation" section, I commented
this out.
Marco :-)
						<plugin>
							<artifactId>maven-javadoc-plugin</artifactId>
						</plugin>
-->

						<plugin>
							<!--
							Note, that this requires the mvn command line parameter '-Daggregate=true'!
							Without this parameter, the test report will be empty.
							-->
							<artifactId>maven-surefire-report-plugin</artifactId>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-pmd-plugin</artifactId>
							<version>2.5</version>
							<configuration>
								<linkXref>true</linkXref>
								<sourceEncoding>utf-8</sourceEncoding>
								<minimumTokens>100</minimumTokens>
								<targetJdk>1.6</targetJdk>
								<excludes>
									<!--
									ID classes in tests are usually auto-generated (by the NightLabs SDK) and contain heaps
									of duplicated code (the same in each class).
									-->
									<exclude>**/test/**/id/*ID.java</exclude>
								</excludes>
<!--
								<excludeRoots>
									<excludeRoot>target/generated-sources/stubs</excludeRoot>
								</excludeRoots>
-->
							</configuration>
						</plugin>

<!--
Neither findbugs nor cobertura support aggregating. First of all, we probably have to move this whole maven-site-plugin stuff
from here to the parent pom, as these plugins have to somehow be executed individually per module. And then we maybe have to
find some manual aggregate solution. For now, we simply deactivate this plugin.
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>findbugs-maven-plugin</artifactId>
							<version>2.3.2</version>
							<configuration>
								<xmlOutput>true</xmlOutput>
								<xmlOutputDirectory>target/findbugs</xmlOutputDirectory>
								<effort>Max</effort>
								<threshold>Low</threshold>
							</configuration>
						</plugin>
-->						

<!--
This does not work due to a bug in Jenkins:

	http://jenkins.361315.n4.nabble.com/JIRA-Created-JENKINS-9058-Problem-with-cobertura-plugin-td3356550.html

We'll enable this after it is fixed and we updated to a new Jenkins version.

Marco :-)

						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>cobertura-maven-plugin</artifactId>
							<configuration>
								<formats>
									<format>xml</format>
									<format>html</format>
								</formats>
							</configuration>
						</plugin>
-->
					</reportPlugins>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>